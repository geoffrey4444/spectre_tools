#!/bin/env python

# Distributed under the MIT License.
# See LICENSE.txt for details.

import glob, h5py, re, argparse, sys

parser = argparse.ArgumentParser(description="Generate xdmf file from a spectre hdf5 file and write the result to stdout.")
parser.add_argument("input", help="Volume hdf5 file generated by spectre")
args = parser.parse_args()

filename = args.input
h5file = h5py.File(filename, 'r')
element_data = h5file.get('element_data.vol')
temporal_ids_and_values = [(x, element_data.get(x).attrs['observation_value'])
                           for x in element_data.keys()]
temporal_ids_and_values.sort(key=lambda x: x[1])

xdmf_output = "<?xml version=\"1.0\" ?>\n" \
    "<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\">\n" \
    "<Xdmf Version=\"2.0\">\n" \
    "<Domain>\n" \
    "<Grid Name=\"Evolution\" GridType=\"Collection\" " \
    "CollectionType=\"Temporal\">\n"

for id_and_value in temporal_ids_and_values:
    h5temporal = element_data.get(id_and_value[0])
    xdmf_output += "  <Grid Name=\"Grids\" GridType=\"Collection\">\n"
    xdmf_output += "    <Time Value=\"%1.14e\"/>\n" % (id_and_value[1])
    grids = [x for x in h5temporal.keys()]
    for grid in grids:
        extents = h5temporal.get(grid).attrs['extents']
        number_of_cells = 1
        for x in extents:
            number_of_cells *= (x - 1)
        data_item = "        <DataItem Dimensions=\"%d %d %d\" NumberType=\"Double\" Precision=\"8\" Format=\"HDF5\">\n" % (
            extents[0], extents[1], extents[2])
        element_path = "          %s:/element_data.vol/%s/%s" % (
            filename, id_and_value[0], grid)
        xdmf_output += "    <Grid Name=\"%s\" GrideType=\"Uniform\">\n" % (
            grid)
        # Write topology information
        xdmf_output += "      <Topology TopologyType=\"Hexahedron\" " \
            "NumberOfElements=\"%d\">\n" % (number_of_cells)
        xdmf_output += "        <DataItem Dimensions=\"%d %d %d 8\" NumberType=\"Int\" Format=\"HDF5\">\n" % (
            extents[0] - 1, extents[1] - 1, extents[2] - 1)
        xdmf_output += element_path + "/connectivity\n        </DataItem>\n" \
            "      </Topology>\n"
        # Write geometry/coordinates
        xdmf_output += "      <Geometry Type=\"X_Y_Z\">\n"
        xdmf_output += data_item + element_path + "/InertialCoordinates_x\n" \
            "        </DataItem>\n"
        xdmf_output += data_item + element_path + "/InertialCoordinates_y\n" \
            "        </DataItem>\n"
        xdmf_output += data_item + element_path + "/InertialCoordinates_z\n" \
            "        </DataItem>\n"
        xdmf_output += "      </Geometry>\n"
        # Write tensor components as scalars
        components = [x for x in h5temporal.get(grid).keys()]
        components.remove('InertialCoordinates_x')
        components.remove('InertialCoordinates_y')
        components.remove('InertialCoordinates_z')
        components.remove('connectivity')
        for component in components:
            xdmf_output += "      <Attribute Name=\"%s\" AttributeType=\"Scalar\" Center=\"Node\">\n" % (
                component)
            xdmf_output += data_item + element_path + (
                "/%s\n" % component) + "        </DataItem>\n"
            xdmf_output += "      </Attribute>\n"
        xdmf_output += "    </Grid>\n"
    xdmf_output += "  </Grid>\n"

xdmf_output += "</Grid>\n</Domain>\n</Xdmf>"

print(xdmf_output)
